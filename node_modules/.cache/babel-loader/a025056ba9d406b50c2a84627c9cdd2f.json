{"ast":null,"code":"import _toConsumableArray from \"D:\\\\tnew\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"D:\\\\tnew\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\tnew\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { CONSTANTS } from \"../actions\";\nvar initialState = {\n  \"list-0\": {\n    id: \"list-0\",\n    cards: [\"card-0\"],\n    title: \"myList\",\n    board: \"board-0\"\n  }\n};\n\nvar listsReducer = function listsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      {\n        var _action$payload = action.payload,\n            title = _action$payload.title,\n            id = _action$payload.id;\n        var newList = {\n          title: title,\n          id: \"list-\".concat(id),\n          cards: []\n        };\n\n        var newState = _objectSpread({}, state, _defineProperty({}, \"list-\".concat(id), newList));\n\n        return newState;\n      }\n\n    case CONSTANTS.ADD_CARD:\n      {\n        var _action$payload2 = action.payload,\n            listID = _action$payload2.listID,\n            _id = _action$payload2.id;\n        var list = state[listID];\n        list.cards.push(\"card-\".concat(_id));\n        return _objectSpread({}, state, _defineProperty({}, listID, list));\n      }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      var _action$payload3 = action.payload,\n          droppableIdStart = _action$payload3.droppableIdStart,\n          droppableIdEnd = _action$payload3.droppableIdEnd,\n          droppableIndexEnd = _action$payload3.droppableIndexEnd,\n          droppableIndexStart = _action$payload3.droppableIndexStart,\n          type = _action$payload3.type; // draggin lists around - the listOrderReducer should handle this\n\n      if (type === \"list\") {\n        return state;\n      } // in the same list\n\n\n      if (droppableIdStart === droppableIdEnd) {\n        var _list$cards;\n\n        var _list = state[droppableIdStart];\n\n        var card = _list.cards.splice(droppableIndexStart, 1);\n\n        (_list$cards = _list.cards).splice.apply(_list$cards, [droppableIndexEnd, 0].concat(_toConsumableArray(card)));\n\n        return _objectSpread({}, state, _defineProperty({}, droppableIdStart, _list));\n      } // other list\n\n\n      if (droppableIdStart !== droppableIdEnd) {\n        var _listEnd$cards, _objectSpread5;\n\n        // find the list where the drag happened\n        var listStart = state[droppableIdStart]; // pull out the card from this list\n\n        var _card = listStart.cards.splice(droppableIndexStart, 1); // find the list where the drag ended\n\n\n        var listEnd = state[droppableIdEnd]; // put the card in the new list\n\n        (_listEnd$cards = listEnd.cards).splice.apply(_listEnd$cards, [droppableIndexEnd, 0].concat(_toConsumableArray(_card)));\n\n        return _objectSpread({}, state, (_objectSpread5 = {}, _defineProperty(_objectSpread5, droppableIdStart, listStart), _defineProperty(_objectSpread5, droppableIdEnd, listEnd), _objectSpread5));\n      }\n\n      return state;\n\n    case CONSTANTS.DELETE_CARD:\n      {\n        var _action$payload4 = action.payload,\n            _listID = _action$payload4.listID,\n            _id2 = _action$payload4.id;\n        var _list2 = state[_listID];\n\n        var newCards = _list2.cards.filter(function (cardID) {\n          return cardID !== _id2;\n        });\n\n        return _objectSpread({}, state, _defineProperty({}, _listID, _objectSpread({}, _list2, {\n          cards: newCards\n        })));\n      }\n\n    case CONSTANTS.EDIT_LIST_TITLE:\n      {\n        var _action$payload5 = action.payload,\n            _listID2 = _action$payload5.listID,\n            newTitle = _action$payload5.newTitle;\n        var _list3 = state[_listID2];\n        _list3.title = newTitle;\n        return _objectSpread({}, state, _defineProperty({}, _listID2, _list3));\n      }\n\n    case CONSTANTS.DELETE_LIST:\n      {\n        var _listID3 = action.payload.listID;\n        var _newState = state;\n        delete _newState[_listID3];\n        return _newState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;","map":{"version":3,"sources":["D:\\tnew\\src\\reducers\\listsReducer.js"],"names":["CONSTANTS","initialState","id","cards","title","board","listsReducer","state","action","type","ADD_LIST","payload","newList","newState","ADD_CARD","listID","list","push","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexEnd","droppableIndexStart","card","splice","listStart","listEnd","DELETE_CARD","newCards","filter","cardID","EDIT_LIST_TITLE","newTitle","DELETE_LIST"],"mappings":"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","sourcesContent":["import { CONSTANTS } from \"../actions\";\n\nconst initialState = {\n  \"list-0\": {\n    id: \"list-0\",\n    cards: [\"card-0\"],\n    title: \"myList\",\n    board: \"board-0\"\n  }\n};\n\nconst listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST: {\n      const { title, id } = action.payload;\n      const newList = {\n        title: title,\n        id: `list-${id}`,\n        cards: []\n      };\n\n      const newState = { ...state, [`list-${id}`]: newList };\n\n      return newState;\n    }\n\n    case CONSTANTS.ADD_CARD: {\n      const { listID, id } = action.payload;\n      const list = state[listID];\n      list.cards.push(`card-${id}`);\n      return { ...state, [listID]: list };\n    }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexEnd,\n        droppableIndexStart,\n\n        type\n      } = action.payload;\n\n      // draggin lists around - the listOrderReducer should handle this\n      if (type === \"list\") {\n        return state;\n      }\n\n      // in the same list\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state[droppableIdStart];\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n        return { ...state, [droppableIdStart]: list };\n      }\n\n      // other list\n      if (droppableIdStart !== droppableIdEnd) {\n        // find the list where the drag happened\n        const listStart = state[droppableIdStart];\n        // pull out the card from this list\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        // find the list where the drag ended\n        const listEnd = state[droppableIdEnd];\n\n        // put the card in the new list\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        return {\n          ...state,\n          [droppableIdStart]: listStart,\n          [droppableIdEnd]: listEnd\n        };\n      }\n      return state;\n\n    case CONSTANTS.DELETE_CARD: {\n      const { listID, id } = action.payload;\n\n      const list = state[listID];\n      const newCards = list.cards.filter(cardID => cardID !== id);\n\n      return { ...state, [listID]: { ...list, cards: newCards } };\n    }\n\n    case CONSTANTS.EDIT_LIST_TITLE: {\n      const { listID, newTitle } = action.payload;\n\n      const list = state[listID];\n      list.title = newTitle;\n      return { ...state, [listID]: list };\n    }\n\n    case CONSTANTS.DELETE_LIST: {\n      const { listID } = action.payload;\n      const newState = state;\n      delete newState[listID];\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;\n"]},"metadata":{},"sourceType":"module"}